#+TITLE: Emacs configuration
#+PROPERTY: header-args :tangle yes

* Table of Contents                                                   :TOC_2:
- [[#enable-melpa-and-use-package][Enable MELPA and use-package]]
- [[#configuration][Configuration]]
- [[#themes][Themes]]
- [[#productivity][Productivity]]
  - [[#projectile][Projectile]]
  - [[#helm][Helm]]
  - [[#ivy][Ivy]]
  - [[#magit][Magit]]
  - [[#org][Org]]
  - [[#ibuffer][Ibuffer]]
  - [[#company][Company]]
- [[#languages][Languages]]
  - [[#python][Python]]
  - [[#r][R]]
  - [[#julia][Julia]]
  - [[#haskell][Haskell]]
  - [[#rust][Rust]]
  - [[#cc][C/C++]]
  - [[#factor][Factor]]
  - [[#j][J]]
  - [[#tidal][Tidal]]
- [[#file-handling][File handling]]
- [[#miscellaneous][Miscellaneous]]
- [[#maybe-someday][Maybe someday]]

* Enable MELPA and use-package
Use MELPA.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    (add-to-list 'package-archives (cons "melpa" url) t))
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  ;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+END_SRC

Load ~use-package.el~.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'diminish))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  ;; For profiling
  (setq use-package-verbose t)
#+END_SRC

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (let ((straight-current-profile 'pinned))
    (add-to-list 'straight-x-pinned-packages
                 '("exec-path-from-shell" . "7e7f38188473ba1fc5325888707de3f9153d76b0")))
#+end_src

* Configuration
Useful options.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq make-backup-files nil)
  (setq auto-save-list-file-name nil)
  (setq auto-save-default nil)

  (setq search-highlight t)
  (setq query-replace-highlight t)
  (setq mouse-sel-retain-highlight t)
#+END_SRC

Use a minimal UI.
#+BEGIN_SRC emacs-lisp
  (fringe-mode 1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

At some point this helped window splitting behaviour, but I'm not sure
I need it anymore.
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 150)
  (setq split-height-threshold 9000)
#+END_SRC

Don't save customisation in ~init.el~.
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (when (file-exists-p custom-file) (load custom-file))
#+END_SRC

I'm giving these a spin to see if I like them.
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)

  (setq sentence-end-double-space nil)

  (setq ring-bell-function 'ignore)

  ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Themes
#+BEGIN_SRC emacs-lisp
  (pcase system-type
    (`gnu/linux  (set-frame-font "Deja Vu Sans Mono 9"))
    (`windows-nt (set-frame-font "-outline-Consolas-normal-r-normal-normal-14-97-96-96-c-*-iso8859-1")))

  (use-package nord-theme
      :config
      (load-theme 'nord t))

  (custom-theme-set-faces
   'user
   '(variable-pitch ((t (:family "Vollkorn" :height 110 :weight thin)))))
#+END_SRC

* Productivity
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand
    :diminish
    :bind (("s-p" . projectile-command-map)
           ("C-c p" . projectile-command-map))
    :config
    (projectile-mode +1))
#+END_SRC

** Helm
   :PROPERTIES:
   :header-args: :tangle no
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish
    :bind (("M-x" . helm-M-x)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           :map helm-map
           ("TAB" . helm-execute-persistent-action)
           ("C-z" . helm-select-action))
    :init
    (helm-mode)
    :config
    (setq helm-split-window-in-side-p t)
    (setq helm-mode-fuzzy-match t))

  (use-package helm-company
    :bind (:map company-mode-map
                ("C-:" . helm-company)
                :map company-active-map
                ("C-:" . helm-company)))

  (use-package helm-projectile
    :config
    (helm-projectile-on))

  (use-package helm-swoop
    :bind (("M-i" . helm-swoop)
           ("M-I" . helm-swoop-back-to-last-point)
           ("C-c M-i" . helm-multi-swoop)
           ("C-x M-i" . helm-multi-swoop-all)
           :map helm-multi-swoop-map
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line)
           :map isearch-mode-map
           ("M-i" . helm-swoop-from-isearch)
           :map helm-swoop-map
           ("M-i" . helm-multi-swoop-all-from-helm-swoop)
           ("C-r" . helm-previous-line)
           ("C-s" . helm-next-line)))
#+END_SRC

** Ivy
   :PROPERTIES:
   :header-args: :tangle yes
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-c C-r" . ivy-resume)
           ("<f6>" . ivy-resume))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("<f1> f" . counsel-describe-function)
           ("<f1> v" . counsel-describe-variable)
           ("<f1> l" . counsel-find-library)
           ("<f2> i" . counsel-info-lookup-symbol)
           ("<f2> u" . counsel-unicode-char)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)
           ("C-S-o" . counsel-rhythmbox)
           :map minibuffer-local-map
           ("C-r" . counsel-minibuffer-history)))

  (use-package swiper
    :bind (("C-s" . swiper))
    :config
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
       )

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))

  (use-package counsel-tramp
    :bind (("C-c s" . counsel-tramp)))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :diminish auto-revert-mode
    :bind (("C-x g" . magit-status)))
#+END_SRC

** Org
Loads [[org.org][org/org.org]].
#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb))
    :config
    (org-babel-load-file (expand-file-name "org/org.org" user-emacs-directory)))

  (use-package org-journal
    :defer)

  (use-package org-pdftools)

  (use-package org-web-tools
    :bind (:map org-mode-map
                ("C-c C-S-l" . org-web-tools-insert-link-for-url)))

  (use-package ob-sagemath
    :defer)
#+END_SRC

Enable ~polymode~.
#+BEGIN_SRC emacs-lisp
  (use-package poly-org
    :defer)
#+END_SRC

Enable ~toc-org~ so this file can have a ToC in GitHub.
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-enable))
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :bind (("C-x C-b" . ibuffer))
    :config
    (setq ibuffer-never-show-predicates (list (rx "*helm"))))

  (use-package ibuffer-vc)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :hook (prog-mode . company-mode))
#+END_SRC
* Languages

** Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :defer
    :diminish
    :config
    (setq python-shell-interpreter "ipython")
    (setq python-shell-interpreter-args "-i --simple-prompt")
    (defalias 'workon 'pyvenv-workon))

  (use-package elpy
    :defer
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (setq elpy-rpc-backend "jedi")
    (delete `elpy-module-highlight-indentation elpy-modules))

  (use-package pyvenv
    :defer
    :config
    (setenv "WORKON_HOME" "~/miniconda3/envs"))

  (use-package exec-path-from-shell
    :straight (:host github :repo "purcell/exec-path-from-shell"))
  
  (use-package ein
    :straight (:host github :repo "millejoh/emacs-ipython-notebook")
    :defer
    :init
    (defun json-encode-string (string)
          "Return a JSON representation of STRING."
          ;; Try to avoid buffer overhead in trivial cases, while also
          ;; avoiding searching pathological strings for escape characters.
          ;; Since `string-match-p' doesn't take a LIMIT argument, we use
          ;; string length as our heuristic.  See also bug#20154.
          (if (and (< (length string) json--long-string-threshold)
                   (not (string-match-p (rx json--escape) string)))
              (concat "\"" string "\"")
            (with-current-buffer
                (or json--string-buffer
                    (with-current-buffer (generate-new-buffer " *json-string*")
                      ;; This seems to afford decent performance gains.
                      (setq-local inhibit-modification-hooks t)
                      (setq json--string-buffer (current-buffer))))
              (insert ?\" (substring-no-properties string))
              (goto-char (1+ (point-min)))
              (while (re-search-forward (rx json--escape) nil 'move)
                (let ((char (preceding-char)))
                  (delete-char -1)
                  (insert ?\\ (or
                               ;; Special JSON character (\n, \r, etc.).
                               (car (rassq char json-special-chars))
                               ;; Fallback: UCS code point in \uNNNN form.
                               (format "u%04x" char)))))
              (insert ?\")
              ;; Empty buffer for next invocation.
              (delete-and-extract-region (point-min) (point-max)))))
    :config
    (setq ein:output-area-inlined-images t))
#+END_SRC

** R
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :defer
    :config
    (setq ess-eval-visibly nil)
    (setq ess-set-style 'C++)
    (setq ess-fancy-comments nil))

  (use-package poly-R
    :defer)
#+END_SRC

** Julia
#+BEGIN_SRC emacs-lisp
  (use-package julia-mode
    :mode "\\.jl\\'")

  (use-package julia-repl
    :hook (julia-mode . julia-repl-mode))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode (("\\.hs\\'" . haskell-mode))
    :bind (:map haskell-mode-map
                ("C-c C-l" . haskell-process-load-or-reload)
                ("C-`" . haskell-interactive-bring)
                ("C-c C-t" . haskell-process-do-type)
                ("C-c C-i" . haskell-process-do-info)
                ("C-c C-c" . haskell-compile)
                ("C-c h" . haskell-hoogle)
                ("C-c C-c" . haskell-process-cabal-build)
                ("C-c C-k" . haskell-interactive-mode-clear)
                ("C-c c" . haskell-process-cabal))
    :hook (haskell-mode . interactive-haskell-mode)
    :config
    (setq haskell-compile-cabal-build-command "stack build")
    (setq haskell-process-type 'stack-ghci)
    (setq haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans -fshow-loaded-modules" "--no-build" "--no-load"))
    (setq haskell-process-suggest-remove-import-lines t)
    (setq haskell-process-auto-import-loaded-modules t)
    (setq haskell-process-log t))

  (use-package dante
    :hook (haskell-mode . dante-mode))
#+END_SRC

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'")
#+end_src

** C/C++
#+BEGIN_SRC emacs-lisp
  (use-package cc-mode
    :defer
    :config
    (setq c-default-style "stroustrup"))
#+END_SRC

** Factor
#+BEGIN_SRC emacs-lisp
  (use-package fuel
    :mode ("\\.factor\\'" . factor-mode)
    :init
    (setq fuel-factor-root-dir "/usr/lib/factor"))
#+END_SRC

** J
#+BEGIN_SRC emacs-lisp
  (use-package j-mode
    :mode "\\.ijs\\'"
    :init
    (setq j-console-cmd "/usr/lib/j8/bin/jconsole"))
#+END_SRC

** Tidal
#+BEGIN_SRC emacs-lisp
  (use-package tidal
    :mode "\\.tidal\\'"
    :after haskell-mode
    :init
    (let* ((arguments '("exec" "--package" "tidal" "--"))
           (path (concat (string-join arguments " ") " ghc-pkg field tidal data-dir"))
           (path "stack exec --package tidal -- ghc-pkg field tidal data-dir")
           (filepath (string-trim (cadr (split-string (shell-command-to-string path) ":")))))
      (setq tidal-interpreter "stack")
      (setq tidal-interpreter-arguments (append arguments '("ghci")))
      (setq tidal-boot-script-path (expand-file-name "BootTidal.hs" filepath))))
#+END_SRC

* File handling
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :mode "\\.csv\\'")

  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (use-package markdown-mode
    :mode "\\.md\\'"
    :config
    (setq markdown-fontify-code-blocks-natively t))

  (use-package poly-markdown
    :defer)

  (use-package pdf-tools
    :load-path "site-lisp/pdf-tools/lisp"
      :magic ("%PDF" . pdf-view-mode)
      :config
      (pdf-tools-install :no-query))

  (use-package powershell
    :mode "\\.ps1\\'")

  (use-package terraform-mode
    :mode "\\.tf\\'")

  (use-package yaml-mode
    :mode "\\.y[a]ml\\'")

  (use-package web-mode
    :mode "\\.html?\\'")
#+END_SRC
* Miscellaneous

#+BEGIN_SRC emacs-lisp
  (use-package discover-my-major
    :bind (("C-h C-m" . discover-my-major)
           ("C-h M-m" . discover-my-mode)))

  (use-package expand-region
      :bind ("C-=" . er/expand-region))

  (use-package macrostep
    :bind (:map emacs-lisp-mode-map
                ("C-c e" . macrostep-expand)))

  (use-package paredit
    :diminish
    :hook ((emacs-lisp-mode eval-expression-minibuffer-setup ielm-mode lisp-mode lisp-interaction-mode scheme-mode) . enable-paredit-mode))

  (setq tramp-default-method "ssh")

  (use-package undo-fu
    :diminish
    :demand
    :bind (("C-z" . undo-fu-only-undo)
           ("C-S-z" . undo-fu-only-redo)))
#+END_SRC
* Maybe someday
Here's a list of other packages to explore:
- [[https://github.com/abo-abo/ace-window][ace-window]]
- auto-complete
- [[https://github.com/abo-abo/avy][avy]]
- [[http://company-mode.github.io/][company]]
- [[https://github.com/syohex/emacs-git-gutter-fringe][git-gutter-fringe]]
- jedi
- [[https://github.com/emacs-lsp/lsp-mode][lsp]]
- [[https://github.com/jaypei/emacs-neotree][neotree]]
- [[https://github.com/Malabarba/paradox][paradox]]
- [[http://github.com/realgud/realgud/][realgud]]
- [[http://github.com/Malabarba/smart-mode-line][smart-mode-line]]
- [[http://nschum.de/src/emacs/tempo-snippets/][tempo-snippets]]
